import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class ClimbingLeaderboard {
    public static List<Integer> climbingLeaderboard(List<Integer> ranked, List<Integer> player) {
        List<Integer> result = new ArrayList<>();

        // Remove duplicates from the ranked array while preserving its order
        ranked = removeDuplicates(ranked);

        int i = ranked.size() - 1; // Pointer for ranked array

        // Traverse player array from end to beginning
        for (int j = player.size() - 1; j >= 0; j--) {
            // Compare current player score with current ranked score
            while (i >= 0 && player.get(j) >= ranked.get(i)) {
                // Current player score is greater than or equal to current ranked score
                i--;
            }
            // Add the rank of the next score
            result.add(i + 2);
        }

        // Reverse the result list to get the correct order
        Collections.reverse(result);

        return result;
    }

    private static List<Integer> removeDuplicates(List<Integer> list) {
        List<Integer> result = new ArrayList<>();

        for (int i = 0; i < list.size(); i++) {
            if (i == 0 || !list.get(i).equals(list.get(i - 1))) {
                result.add(list.get(i));
            }
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        List<Integer> ranked = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            ranked.add(scanner.nextInt());
        }

        int m = scanner.nextInt();
        List<Integer> player = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            player.add(scanner.nextInt());
        }

        List<Integer> result = climbingLeaderboard(ranked, player);

        for (int i : result) {
            System.out.println(i);
        }
    }
}
